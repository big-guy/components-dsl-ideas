/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ng.org.gradle.java;

import ng.org.gradle.java.model.JavaApi;
import ng.org.gradle.java.model.JavaDocs;
import ng.org.gradle.java.model.JavaSources;
import ng.org.gradle.jvm.model.JvmLibraryFeature;
import ng.org.gradle.jvm.model.JvmLibraryTarget;
import ng.org.gradle.software.model.LibraryComponent;
import ng.org.gradle.software.model.Model;
import org.gradle.api.Project;
import org.gradle.api.Plugin;

import java.util.Arrays;
import java.util.stream.Collectors;

/*
Component
    Coordinates
Feature
    Variant
        Name
        Coordinates?
        Capabilities
        Attributes
        Artifact
        Dependencies (+constraints)

---
Metadata rules?
Variant rules?

---

Software Development Jargon

what are elements?

- Libraries
    - API elements
    - Runtime elements
    - Documentation
    - Sources
    - Reports (code quality?)
    - Related components?

- Applications
    - Installation elements
    - Distribution elements
    - Runtime elements
    - Documentation
    - Sources
    - Reports (code quality?)
    - Related components

Tests are components. Tests are applications.
Test fixtures are components. Test fixtures are libraries.

Maybe later
- Platforms
    - API elements
    - Runtime elements
    - Reports (CVE?)
    - Related components

---
// foo/build.gradle
// apply java-library

library {
    main {
        targetJdks = [ 8, 15 ]
        sources {
            java {
                srcDir "src/other-main/java"
            }
        }
        dependencies {
            api "..."
            implementation "..."
        }
        targets {
            main8 {
                dependencies {
                    api "..."
                    implementation "..."
                }
            }
        }
    }
}

components {
    foo(LibraryComponent) {
        features {
            main(JvmLibraryFeature) {
                targetJdks = [ 8, 15 ]
                sources {
                    java {
                        srcDir "src/main/java"
                    }
                }
                dependencies {
                    api "..."
                    implementation "..."
                }
                targets {
                    main8(JvmLibraryTarget) {
                        sources {
                            java {
                                srcDir "src/main8/java"
                            }
                        }
                        dependencies {
                            api "..."
                            implementation "..."
                        }
                    }
                    main15(JvmLibraryTarget) {
                        // ...
                    }
                }
                variants {
                    // for 8
                    apiElements8(JavaApi) {
                    }
                    runtimeElements8(JavaRuntime) {
                    }
                    sourceElements8(JavaSources) {
                    }
                    javadocElements8(JavaDocumentation) {
                    }
                    // for 15 too
                }
            }
        }
    }
}

java-library today:
- java {} extension
- sourceSets.main
- sourceSets.main.java
- api, implementation, compileOnly, runtimeOnly
- compileClasspath
- runtimeClasspath
- annotationProcessor
- compileJava
- processResources
- classes lifecycle
- javadoc
- apiElements
    - jar
    - secondary: classes
- runtimeElements
    - jar
    - secondary: classes
    - secondary: resources
- mainSourceElements
    - only directories
- sourcesElements (optional)
    - sourcesJar
- javadocElements (optional)
    - javadocJar
- things related to tests (ignore this for now)

 */
/**
 *
 */
public abstract class JavaLibraryPlugin implements Plugin<Project> {
    public void apply(Project project) {
        project.getPluginManager().apply("ng.org.gradle.jvm-library");
        project.getPluginManager().apply("ng.org.gradle.java-language");

        Model model = project.getExtensions().getByType(Model.class);
        model.getNgComponents().withType(LibraryComponent.class).named(project.getName(), component -> {
            component.getFeatures().withType(JvmLibraryFeature.class).configureEach(feature -> {
                // By convention, we target JDK8 and JDK15
                feature.getTargetJdks().convention(Arrays.asList(8, 15));

                // Each library target produces a JavaApi, JavaSources and Javadoc
                // TODO: Should only do this if there are Java sources?
                feature.getTargets().configureEach(target -> {
                    target.getVariants().register(target.nameOf("apiElements"), JavaApi.class);
                    target.getVariants().register(target.nameOf("javadocElements"), JavaDocs.class);
                    target.getVariants().register(target.nameOf("sourcesElements"), JavaSources.class);
                });
            });
        });
    }
}
